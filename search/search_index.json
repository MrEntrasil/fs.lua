{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#installation-instructions","title":"Installation instructions","text":"<p>mrentrasil.github.io/fs.lua/setup</p>"},{"location":"#example","title":"Example","text":"<p>Ok, this is an example of how you can make a mini project with fs.lua.  In this tutorial, you will learn how to make a custom fs module. </p>"},{"location":"#directories","title":"Directories","text":"<pre><code>- fs.lua\n- fslua.so\n- main.lua\n</code></pre> <p>First, we need to initialize a module.  fs.lua <pre><code>local fslua = require(\"fslua\")\nlocal module = {}\n\nreturn module\n</code></pre></p> <p>Let's do some basic functions. <pre><code>local fslua = require(\"fslua\")\nlocal module = {}\n\n-- read file function\nmodule.read = function(name)\n    -- check if arguments exists\n    assert(name, \"Argument 1 missing.\")\n    -- calling C function\n    local content = fslua.readfile(name)\n    -- return value\n    if type(content) ~= nil then return content else return \"Could not open file(file does not exists).\" end\nend\n\n-- write file function\nmodule.write = function(name, toWrite)\n    -- check if arguments exists\n    assert(name, \"Argument 1 missing.\")\n    assert(toWrite, \"Argument 2 missing.\")\n    -- calling C function\n    local success = fslua.writefile(name, toWrite)\n    -- return value\n    return success\nend\n\nreturn module\n</code></pre></p> <p>Now, we can use the functions. main.lua <pre><code>local fs = require(\"fs\")\nlocal file_content = fs.read(\"fs.lua\")\nprint(\"file's content: \"..file_content)\n</code></pre> <pre><code>lua main.lua\n</code></pre></p>"},{"location":"#end","title":"End","text":"<p>Tutorial finished! You can see the reference guide on the reference's tab. License: MIT License</p>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 MrEntrasil</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"guide/setup/","title":"Setup","text":""},{"location":"guide/setup/#dependencies","title":"Dependencies","text":"<p>lua-dev 5.4 g++ WSL/Linux</p>"},{"location":"guide/setup/#install","title":"Install","text":"<p>download source: <pre><code>git clone https://github.com/MrEntrasil/fs.lua.git --depth=1\n</code></pre></p>"},{"location":"guide/setup/#build","title":"Build","text":"<pre><code>cd fs.lua\nmake\nmv fslua.so ../fslua.so\ncd ..\nrm -rf fs.lua\n</code></pre>"},{"location":"reference/chdir/","title":"chdir","text":""},{"location":"reference/chdir/#fsluachdir","title":"fslua.chdir","text":"<p>cd, just cd</p>"},{"location":"reference/chdir/#usage","title":"Usage","text":"<pre><code>fslua.chdir(path: string) -&gt; nil\n</code></pre>"},{"location":"reference/chdir/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\nfslua.chdir(\"src\")\nfslua.writefile(\"a\", \"a\")\n</code></pre>"},{"location":"reference/chdir/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n-- src\n</code></pre>"},{"location":"reference/exists/","title":"exists","text":""},{"location":"reference/exists/#fsluaexists","title":"fslua.exists","text":""},{"location":"reference/exists/#usage","title":"Usage","text":"<pre><code>fslua.exists(path: string) -&gt; boolean\n</code></pre>"},{"location":"reference/exists/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal dirpath = \".\"\nlocal result = fslua.exists(dirpath)\nprint((\"exists? %s\"):format(tostring(result)))\n</code></pre>"},{"location":"reference/exists/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n</code></pre>"},{"location":"reference/getline/","title":"getline","text":""},{"location":"reference/getline/#fsluagetline","title":"fslua.getline","text":"<p>Reads the contents of a file using std::getline</p>"},{"location":"reference/getline/#usage","title":"Usage","text":"<pre><code>fslua.getline(path: string) -&gt; table || nil\n</code></pre>"},{"location":"reference/getline/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal dir = fslua.getline(\"data.txt\")\nprint((function() if dir then return #dir else return nil end end)())\n</code></pre>"},{"location":"reference/getline/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n- data.txt\n</code></pre>"},{"location":"reference/readdir/","title":"readdir","text":""},{"location":"reference/readdir/#fsluareaddir","title":"fslua.readdir","text":""},{"location":"reference/readdir/#usage","title":"Usage","text":"<pre><code>fslua.readdir(path: string) -&gt; table || nil\n</code></pre>"},{"location":"reference/readdir/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal dir = \".\"\nlocal dir_table = fslua.readdir(dir)\n\nif dir_table then\n    for _, file in pairs(dir_table) do\n        print(file)\n    end\nelse\n    print(\"Could not access dir: \"..dir)\nend\n</code></pre>"},{"location":"reference/readdir/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n</code></pre>"},{"location":"reference/readfile/","title":"readfile","text":""},{"location":"reference/readfile/#fsluareadfile","title":"fslua.readfile","text":"<p>Reads the contents of a file using std::ostringstream</p>"},{"location":"reference/readfile/#usage","title":"Usage","text":"<pre><code>fslua.readfile(filepath: string) -&gt; string || nil\n</code></pre>"},{"location":"reference/readfile/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal filepath = \"file.txt\"\nlocal content = fslua.readfile(filepath)\n\nif content == nil then\n    return print(\"file not found.\")\nend\n\nprint((\"%s's content:\"):format(filepath))\nprint(content)\n</code></pre>"},{"location":"reference/readfile/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n- file.txt\n</code></pre>"},{"location":"reference/rm/","title":"rm","text":""},{"location":"reference/rm/#fsluarm","title":"fslua.rm","text":""},{"location":"reference/rm/#usage","title":"Usage","text":"<pre><code>fslua.rm(path: string) -&gt; boolean\n</code></pre>"},{"location":"reference/rm/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal success = fslua.rm(\"foo.txt\")\nprint((\"success?: %s\"):format(tostring(success)))\n</code></pre>"},{"location":"reference/rm/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n- foo.txt\n</code></pre>"},{"location":"reference/sizeof/","title":"sizeof","text":""},{"location":"reference/sizeof/#fsluasizeof","title":"fslua.sizeof","text":""},{"location":"reference/sizeof/#usage","title":"Usage","text":"<pre><code>fslua.sizeof(filepath: string) -&gt; number\n</code></pre>"},{"location":"reference/sizeof/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal b = fslua.sizeof(\"foo.txt\")\nprint(\"size(bytes): \"..tostring(b))\n</code></pre>"},{"location":"reference/sizeof/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n- foo.txt\n</code></pre>"},{"location":"reference/writedir/","title":"writedir","text":""},{"location":"reference/writedir/#fsluawritedir","title":"fslua.writedir","text":""},{"location":"reference/writedir/#usage","title":"Usage","text":"<pre><code>fslua.writedir(dirpath: string) -&gt; true || nil\n</code></pre>"},{"location":"reference/writedir/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal success = fslua.writedir(\"XIQUE-XIQUE - BA\ud83d\udea9\")\nprint(\"success?: \", success)\n</code></pre>"},{"location":"reference/writedir/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n</code></pre>"},{"location":"reference/writefile/","title":"writefile","text":""},{"location":"reference/writefile/#fsluawritefile","title":"fslua.writefile","text":""},{"location":"reference/writefile/#usage","title":"Usage","text":"<pre><code>fslua.writefile(filepath: string, content: string) -&gt; boolean || nil\n</code></pre>"},{"location":"reference/writefile/#example","title":"Example","text":"<pre><code>local fslua = require(\"fslua\")\n\nlocal filepath = \"foo.txt\"\nlocal success = fslua.writefile(filepath, \"bar\")\nif success == nil then success = false end\n\nprint((\"success?: %s\"):format(tostring(success)))\n</code></pre>"},{"location":"reference/writefile/#tree","title":"\ud83c\udf32\ud83c\udf33 Tree","text":"<pre><code>- main.lua\n- fslua.so\n</code></pre>"}]}